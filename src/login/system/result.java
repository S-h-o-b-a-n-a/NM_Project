/*                                                  
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package login.system;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
/**
 *
 * @author Rushabh Daxini
 */
public class result extends javax.swing.JFrame {
    public Connection cn;
        public Statement st; 
        public InputStream in;
        public Connection conn=null;
        ResultSet rs=null,rs2=null,rs3=null,rstmp=null;
        public PreparedStatement pst=null,pst2=null,pst3=null;
        int curRow=0;
        String uname;
    /**
     * Creates new form result
     */
    public result() {
        initComponents();
        
        try{
           Class.forName("com.mysql.jdbc.Driver");
            conn =DriverManager.getConnection("jdbc:mysql://localhost:3306/student?zeroDateTimeBehavior=convertToNull", "root", "");
            
//JOptionPane.showMessageDialog(null,"Connected");
//return conn;
            }
       catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
//return null;
            }
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2 - getWidth()/2,size.height/2 - getHeight()/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setForeground(new java.awt.Color(51, 51, 255));
        jButton1.setText("Start Allocating Process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 37, 266, 34));

        jButton2.setText("BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 108, 266, 35));

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 350));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        float max = 0;
        int data=0;
        String c1=null,c2=null,c3=null,c4=null;
        try{
            String sql="select * from student_details";
            pst=conn.prepareStatement(sql);
            PreparedStatement pst1 = conn.prepareStatement(sql);
            PreparedStatement pst2 = conn.prepareStatement(sql);
            rstmp=pst.executeQuery();

            rs3=pst1.executeQuery();
            while(rs3.next()){
                if(rs3.getString("Allocated")==null)
                data++;
            }   
            System.out.println("1  "+data);
           
            while(data-->0){
                rstmp.first();
                while(rstmp.next()){
                    if(rstmp.getString("Allocated")==null)
                         max=rstmp.getFloat("ppi");
                    else continue;
                //System.out.println(max);
                }
                rs=pst2.executeQuery();
                while(rs.next()){
                    if(rs.getFloat("ppi")>max){
                        if(rs.getString("Allocated")==null)
                            max=rs.getFloat("ppi");
                        else continue;
                    }       
                }
                System.out.println("maxppi  "+max);
                String sql2="select * from student_details";// where ppi=?";
                pst2=conn.prepareStatement(sql);
                // pst2.setFloat(1,max);
                rs2=pst2.executeQuery();
                while(rs2.next()){
                    if(rs2.getFloat("ppi")!=max)continue;
                    if(rs2.getFloat("ppi")==max){
                        c1=rs2.getString("choice1");
                        c2=rs2.getString("choice2");
                        c3=rs2.getString("choice3");
                        c4=rs2.getString("choice4");
                        System.out.println("in if");
                    }
                int flag=0;
                System.out.println("processing choices of max ppi"+c1+c2+c3+c4+rs2.getFloat("ppi"));
                String sql3="select * from student_details";
                pst3=conn.prepareStatement(sql);
                rs3=pst3.executeQuery();
                while(rs3.next()){
                    if(rs3.getString("Allocated")==null) continue;
                     if(c1.equals(rs3.getString("Allocated").toString())){
                         flag++;
                     }
                }
                System.out.print("Hi flag"+flag+"\n");
                if(flag<2){
                    String rsq="UPDATE student_details SET Allocated=? WHERE ppi=?";
                    pst3=conn.prepareStatement(rsq);
                    pst3.setString(1,c1);
                    pst3.setFloat(2,max);
                    //pst.executeQuery();
                    int executeUpdate = pst3.executeUpdate();
                    System.out.println("Status : "+executeUpdate); 
                    break;
                 }
                 else{
                     flag=0; 
                    sql3="select * from student_details";
                     pst3=conn.prepareStatement(sql);
                      rs3=pst3.executeQuery();
                    while(rs3.next()){
                        if(rs3.getString("Allocated")==null) continue;
                         if(rs3.getString("Allocated").equals(c2)){
                             flag++;
                        }
                    }
                    if(flag<2){
                         String rsq="UPDATE student_details SET Allocated=? WHERE ppi=?";
                        pst3=conn.prepareStatement(rsq);
                        pst3.setString(1,c2);
                        pst3.setFloat(2,max);
                        //pst.executeQuery();
                        int executeUpdate = pst3.executeUpdate();
                        System.out.println("Status : "+executeUpdate); 
                    }
                    else{
                        flag=0;
                
                        sql3="select * from student_details";
                        pst3=conn.prepareStatement(sql);
                        rs3=pst3.executeQuery();
                        while(rs3.next()){
                            if(rs3.getString("Allocated")==null) continue;
                            if(rs3.getString("Allocated").equals(c3)){
                                flag++;
                            }
                        }
                        if(flag<2){
                            String rsq="UPDATE student_details SET Allocated=? WHERE ppi=?";
                            pst3=conn.prepareStatement(rsq);
                            pst3.setString(1,c3);
                            pst3.setFloat(2,max);
                     //pst.executeQuery();
                            int executeUpdate = pst3.executeUpdate();
                            System.out.println("Status : "+executeUpdate); 
                        }
                        else{
                            flag=0;
                
                             sql3="select * from student_details";
                             pst3=conn.prepareStatement(sql);
                             rs3=pst3.executeQuery();
                             while(rs3.next()){
                                 if(rs3.getString("Allocated")==null) continue;
                                if(rs3.getString("Allocated").equals(c4)){
                                    flag++;
                                }
                            }
                        if(flag<2){
                             String rsq="UPDATE student_details SET allocated=? WHERE ppi=?";
                             pst3=conn.prepareStatement(rsq);
                             pst3.setString(1,c4);
                             pst3.setFloat(2,max);
                            //pst.executeQuery();
                            int executeUpdate = pst3.executeUpdate();
                            System.out.println("Status : "+executeUpdate); 
                        }
                        else{
                            String rsq="UPDATE student_details SET Allocated=? WHERE ppi=?";
                             pst3=conn.prepareStatement(rsq);
                            pst3.setString(1,"#");
                            pst3.setFloat(2,max);
                            //pst.executeQuery();
                            int executeUpdate = pst3.executeUpdate();
                            System.out.println("Status : "+executeUpdate); 
                        }
                    }
                   }
                 }
            }
           //data++;
        }    
        
          }catch(Exception e){
             JOptionPane.showMessageDialog(null, e); 
          }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new result().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}   
